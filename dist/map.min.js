(function(){var CarView,CrossroadView,HorizontalStreetView,LeftBottomCurveView,LeftTopCurveView,MapModel,MapView,RightBottomCurveView,RightTopCurveView,TrafficLightView,VerticalStreetView,base,base1,root,indexOf=[].indexOf||function(item){for(var i=0,l=this.length;i<l;i++)if(i in this&&this[i]===item)return i;return-1};LeftTopCurveView||(LeftTopCurveView=this.game.views.LeftTopCurve),CrossroadView||(RightTopCurveView=this.game.views.RightTopCurve),LeftBottomCurveView||(LeftBottomCurveView=this.game.views.LeftBottomCurve),RightBottomCurveView||(RightBottomCurveView=this.game.views.RightBottomCurve),HorizontalStreetView||(HorizontalStreetView=this.game.views.HorizontalStreet),VerticalStreetView||(VerticalStreetView=this.game.views.VerticalStreet),CrossroadView||(CrossroadView=this.game.views.Crossroad),TrafficLightView||(TrafficLightView=this.game.views.TrafficLight),CarView||(CarView=this.game.views.Car),MapModel=function(){function MapModel(canvasHeight,canvasWidth){this.canvasHeight=canvasHeight||300,this.canvasWidth=canvasWidth||300,this.tileHeight=60,this.tileWidth=60,MapModel.SIGNS={LEFT_TOP:"^",RIGHT_TOP:">",RIGHT_BOTTOM:"v",LEFT_BOTTOM:"<",HORIZONTAL:"-",VERTICAL:"|",CROSSROAD:"+",ANY:"?"}}return MapModel.prototype.getCanvasHeight=function(){return this.canvasHeight},MapModel.prototype.getCanvasWidth=function(){return this.canvasWidth},MapModel.prototype.calculateMap=function(){var col,i,j,map,numCols,numRows,ref,ref1,row;for(map=this._initMap(),numRows=map.numRows,numCols=map.numCols,row=i=0,ref=numRows;0<=ref?i<ref:i>ref;row=0<=ref?++i:--i)for(col=j=0,ref1=numCols;0<=ref1?j<ref1:j>ref1;col=0<=ref1?++j:--j)this._setTile([row,col],map);return JSON.stringify({map:map,numRows:map.numRows,numCols:map.numCols})},MapModel.prototype._initMap=function(){var col,i,j,map,numCols,numRows,ref,ref1,row;for(numRows=Math.floor(this.canvasHeight/this.tileHeight),numCols=Math.floor(this.canvasWidth/this.tileWidth),map=[],map.numRows=numRows,map.numCols=numCols,row=i=0,ref=numRows;0<=ref?i<ref:i>ref;row=0<=ref?++i:--i)for(map[row]=[],col=j=0,ref1=numCols;0<=ref1?j<ref1:j>ref1;col=0<=ref1?++j:--j)map[row][col]=MapModel.SIGNS.ANY;return map},MapModel.prototype._setTile=function(position,map){var col,environment,numCols,numRows,row;return row=position[0],col=position[1],numRows=map.numRows-1,numCols=map.numCols-1,environment={above:row>0?map[row-1][col]:null,below:row<numRows?map[row+1][col]:null,leftHand:col>0?map[row][col-1]:null,rightHand:col<numCols?map[row][col+1]:null},map[row][col]=this.pickTile(environment),map},MapModel.prototype.pickTile=function(environment){var candidates,ref,s,tileSet;return candidates=this.filterTileCandidates(environment),tileSet=function(){var i,len,results;for(results=[],i=0,len=candidates.length;i<len;i++)s=candidates[i],s!==MapModel.SIGNS.ANY&&results.push(s);return results}(),ref=MapModel.SIGNS.ANY,indexOf.call(candidates,ref)>=0?candidates=tileSet[Math.floor(Math.random()*tileSet.length)]:candidates.length>1&&(candidates=candidates[Math.floor(Math.random()*candidates.length)]),candidates[0]},MapModel.prototype.filterTileCandidates=function(environment){var allowedNeighborhood,candidates,envList,k,notAccessibleFrom,numOfNulls,ref,ref1,ref2,ref3,v;return allowedNeighborhood={above:[MapModel.SIGNS.LEFT_TOP,MapModel.SIGNS.RIGHT_TOP,MapModel.SIGNS.VERTICAL,MapModel.SIGNS.CROSSROAD,MapModel.SIGNS.ANY],below:[MapModel.SIGNS.LEFT_BOTTOM,MapModel.SIGNS.RIGHT_BOTTOM,MapModel.SIGNS.VERTICAL,MapModel.SIGNS.CROSSROAD,MapModel.SIGNS.ANY],leftHand:[MapModel.SIGNS.LEFT_TOP,MapModel.SIGNS.LEFT_BOTTOM,MapModel.SIGNS.HORIZONTAL,MapModel.SIGNS.CROSSROAD,MapModel.SIGNS.ANY],rightHand:[MapModel.SIGNS.RIGHT_TOP,MapModel.SIGNS.RIGHT_BOTTOM,MapModel.SIGNS.HORIZONTAL,MapModel.SIGNS.CROSSROAD,MapModel.SIGNS.ANY]},notAccessibleFrom={top:[MapModel.SIGNS.LEFT_BOTTOM,MapModel.SIGNS.RIGHT_BOTTOM,MapModel.SIGNS.HORIZONTAL],bottom:[MapModel.SIGNS.LEFT_TOP,MapModel.SIGNS.RIGHT_TOP,MapModel.SIGNS.HORIZONTAL],left:[MapModel.SIGNS.RIGHT_TOP,MapModel.SIGNS.RIGHT_BOTTOM,MapModel.SIGNS.VERTICAL],right:[MapModel.SIGNS.LEFT_TOP,MapModel.SIGNS.LEFT_BOTTOM,MapModel.SIGNS.VERTICAL]},candidates=function(){var ref,results;ref=MapModel.SIGNS,results=[];for(k in ref)v=ref[k],results.push(v);return results}(),envList=function(){var results;results=[];for(k in environment)v=environment[k],results.push(v);return results}(),numOfNulls=envList.reduce(function(sum,item){return sum+(null===item)},0),2===numOfNulls?(null===environment.above&&(candidates=candidates.filter(function(tile){return indexOf.call(allowedNeighborhood.above,tile)<0})),null===environment.rightHand&&(candidates=candidates.filter(function(tile){return indexOf.call(allowedNeighborhood.rightHand,tile)<0})),null===environment.leftHand&&(candidates=candidates.filter(function(tile){return indexOf.call(allowedNeighborhood.leftHand,tile)<0})),null===environment.below&&(candidates=candidates.filter(function(tile){return indexOf.call(allowedNeighborhood.below,tile)<0}))):1===numOfNulls?(null===environment.above&&(candidates=notAccessibleFrom.top),null===environment.rightHand&&(candidates=notAccessibleFrom.right),null===environment.leftHand&&(candidates=notAccessibleFrom.left),null===environment.below&&(candidates=notAccessibleFrom.bottom)):(ref=environment.above,indexOf.call(notAccessibleFrom.bottom,ref)>=0?(ref1=environment.leftHand,candidates=indexOf.call(notAccessibleFrom.right,ref1)>=0?[MapModel.SIGNS.RIGHT_BOTTOM]:[MapModel.SIGNS.LEFT_BOTTOM,MapModel.SIGNS.HORIZONTAL]):(ref2=environment.leftHand,indexOf.call(notAccessibleFrom.right,ref2)>=0?(ref3=environment.above,candidates=indexOf.call(notAccessibleFrom.bottom,ref3)>=0?[MapModel.SIGNS.RIGHT_BOTTOM]:[MapModel.SIGNS.RIGHT_TOP,MapModel.SIGNS.VERTICAL]):candidates=[MapModel.SIGNS.LEFT_TOP,MapModel.SIGNS.CROSSROAD])),candidates},MapModel}(),MapView=function(){function MapView(node){this.node=node}return MapView.prototype.render=function(mapData){var col,i,j,ref,ref1,row,sign,tile;for(console.log("Translating into DOM:"),console.log(mapData.map),row=i=0,ref=mapData.numRows;0<=ref?i<ref:i>ref;row=0<=ref?++i:--i)for(col=j=0,ref1=mapData.numCols;0<=ref1?j<ref1:j>ref1;col=0<=ref1?++j:--j)sign=mapData.map[row][col],null!==sign&&(tile=this.addTrafficLight(this.getTileForSign(sign)),this.node.appendChild(tile))},MapView.prototype.getTileForSign=function(sign){var view;switch(sign){case MapModel.SIGNS.LEFT_TOP:view=LeftTopCurveView;break;case MapModel.SIGNS.RIGHT_TOP:view=RightTopCurveView;break;case MapModel.SIGNS.RIGHT_BOTTOM:view=RightBottomCurveView;break;case MapModel.SIGNS.LEFT_BOTTOM:view=LeftBottomCurveView;break;case MapModel.SIGNS.HORIZONTAL:view=HorizontalStreetView;break;case MapModel.SIGNS.VERTICAL:view=VerticalStreetView;break;case MapModel.SIGNS.CROSSROAD:view=CrossroadView}return(new view).render()},MapView.prototype.addTrafficLight=function(tile){var trafficLight;return/crossroad/.test(tile.getAttribute("class"))?(trafficLight=(new TrafficLightView).render(),tile.appendChild(trafficLight),trafficLight=(new TrafficLightView).render(),tile.appendChild(trafficLight),trafficLight=(new TrafficLightView).render(),tile.appendChild(trafficLight),trafficLight=(new TrafficLightView).render(),tile.appendChild(trafficLight),tile):tile},MapView.prototype.spawnCar=function(mapData){var indexOfTile,numTiles,tileWithNewCar;return numTiles=mapData.numRows*mapData.numCols,indexOfTile=Math.floor(Math.random()*numTiles),tileWithNewCar=this.node.children.item(indexOfTile),tileWithNewCar.appendChild((new CarView).render()),tileWithNewCar},MapView}(),root="undefined"!=typeof exports&&null!==exports?exports:this,null==root.game&&(root.game={}),null==(base=root.game).models&&(base.models={}),root.game.models.Map=MapModel,null==(base1=root.game).views&&(base1.views={}),root.game.views.Map=MapView}).call(this);
//# sourceMappingURL=map.min.js.map